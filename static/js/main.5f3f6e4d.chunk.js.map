{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["questions","key","title","content","Question","props","useState","isExpanded","setExpanded","contentsElement","React","useRef","height","setHeight","onClick","useCallback","shouldExpand","current","scrollHeight","button","document","getElementById","p","classList","toggle","className","id","ref","style","App","question","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAkCO,IAAMA,EAAY,CACvB,CACEC,IAAK,QACLC,MAAO,kMACPC,QAAS,wPAA8C,wGAA9C,g0BAAqP,6BAAS,6BAA9P,0IAAgS,0FAAhS,8OAcAC,EAAW,SAACC,GAAW,IAAD,EACCC,oBAAS,GADV,mBAC1BC,EAD0B,KACdC,EADc,KAE3BC,EAAkBC,IAAMC,SAFG,EAGLL,mBAAS,GAHJ,mBAG1BM,EAH0B,KAGlBC,EAHkB,KAK3BC,EAAUJ,IAAMK,aAAY,WAChC,IAAIC,GAAgBT,EACpBC,EAAYQ,GACZH,EAAUG,EAAeP,EAAgBQ,QAAQC,aAAe,GAEhE,IAAIC,EAASC,SAASC,eAAe,UACjCC,EAAIF,SAASC,eAAe,YAEhCC,EAAEC,UAAUC,OAAO,UAAUL,EAAOI,UAAUC,OAAO,cACrDF,EAAEC,UAAUC,OAAO,UAAUL,EAAOI,UAAUC,OAAO,OAEpD,CAACjB,EAAYE,IAEhB,OAAO,yBAAKgB,UAAU,kBACpB,4BAAQC,GAAG,SAASZ,QAASA,GAA7B,KACA,iCACE,4BAAKT,EAAMH,OACX,uBAAGuB,UAAU,kBAAkBC,GAAG,WAAWC,IAAKlB,EAAiBmB,MAAO,CAAEhB,WAAWP,EAAMF,YAKpF0B,EA5Ef,SAAaC,GACX,OACE,yBAAKL,UAAU,OACb,gCACE,yBAAKA,UAAU,QACf,0EACA,uJAEF,4BACE,4BACE,yBAAKA,UAAU,kBAAiB,qCAAkB,qIAEnDzB,EAAU+B,KAAI,SAACD,GAAD,OACf,wBAAI7B,IAAK6B,EAAS7B,KAChB,kBAAC,EAAD,CAAUC,MAAO4B,EAAS5B,MAAOC,QAAS2B,EAAS3B,cAGrD,4BACE,yBAAKsB,UAAU,kBAAiB,qCAAkB,0NAEpD,4BACE,yBAAKA,UAAU,kBAAiB,qCAAkB,oMAEpD,4BACE,yBAAKA,UAAU,kBAAiB,qCAAkB,oUCfxCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASC,eAAe,SDyHpB,kBAAmBmB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5f3f6e4d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App(question) {\n  return (\n    <div className=\"App\">\n      <header>\n        <div className=\"img\"></div>\n        <h1>ВОПРОСЫ</h1>\n        <h2>ВСЕ ЧТО ВЫ ХОТИТЕ ЗНАТЬ</h2>\n      </header>\n      <ul>\n        <li>\n          <div className=\"question-block\"><button>+</button><h3>Как оформить заказ?</h3></div>\n        </li>\n        {questions.map((question) => (\n        <li key={question.key}>\n          <Question title={question.title} content={question.content}></Question>\n        </li>\n        ))}\n        <li>\n          <div className=\"question-block\"><button>+</button><h3>Условия доставки за предалами МКАД</h3></div>\n        </li>\n        <li>\n          <div className=\"question-block\"><button>+</button><h3>Какие способы оплаты у вас есть?</h3></div>\n        </li>  \n        <li>\n          <div className=\"question-block\"><button>+</button><h3>У меня есть промокод, но я не понимаю как им пользоваться</h3></div>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport const questions = [\n  {\n    key: \"price\",\n    title: <>Как работает служба доставки?</>,\n    content: <>При заказе до 17:00 доставка осуществляется <strong>в день заказа</strong>. Среднее время доставки 2 часа. Доставка осуществляется до 20:00 ежедневно. Мы работаем без выходных и праздников, чтобы Вы всегда могли кушать вкусную и здоровую еду! <br></br><br></br> Доставка осуществляется <strong>бесплатно</strong> при заказе от 1500 руб. по г.Москва в пределах МКАД</>,\n  },\n];\n\nexport const Pum = (props) => (\n  <ul>\n    {questions.map((question) => (\n      <li>\n        <Question title={question.title} content={question.content} />\n      </li>\n    ))}\n  </ul>\n);\n\nexport const Question = (props) => {\n  const [isExpanded, setExpanded] = useState(false);\n  const contentsElement = React.useRef();\n  const [height, setHeight] = useState(0)\n  \n  const onClick = React.useCallback(() => {\n    let shouldExpand = !isExpanded;\n    setExpanded(shouldExpand);\n    setHeight(shouldExpand ? contentsElement.current.scrollHeight : 0);\n\n    var button = document.getElementById(\"button\");\n    var p = document.getElementById(\"question\")\n    \n    p.classList.toggle('opened');button.classList.toggle('btn-answer');\n    p.classList.toggle('closed');button.classList.toggle('a');\n\n  }, [isExpanded, contentsElement])\n\n  return <div className=\"question-block\">\n    <button id=\"button\" onClick={onClick}>+</button>\n    <section>\n      <h3>{props.title}</h3>\n      <p className=\"question closed\" id=\"question\" ref={contentsElement} style={{ height }}>{props.content}</p>\n    </section>\n  </div>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}